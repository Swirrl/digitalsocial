<script>
  $(function() {

    var config,
    DSIMap = {

      map: null,
      clusters: null,
      allOrganisations: {},
      visibleOrganisations: {},
      currentMaxLineCount: 0,

      config: {
        defaultCenter: [45, 15],
        defaultZoom: 5,
        maxLineWeight: 8,
        maxLineOpacity: 0.666,
        layerWithoutLabels: L.mapbox.tileLayer("<%= Digitalsocial::MAPBOX_HOME_MAP_ID %>"),
        layerWithLabels: L.mapbox.tileLayer("<%= Digitalsocial::MAPBOX_SHOW_MAP_ID %>")
      },

      init: function() {
        config = this.config;

        this.initMap();
        this.bindMapEvents();
        this.initClusters();

        this.fetchOrganisations();
      },

      initMap: function() {
        map = L.map('home-map', { scrollWheelZoom: true })
          .setView(config.defaultCenter, config.defaultZoom)
          .addLayer(config.layerWithoutLabels)
      },

      initClusters: function() {
        clusters = new L.MarkerClusterGroup({
          showCoverageOnHover: false,
          removeOutsideVisibleBounds: false,
          zoomToBoundsOnClick: false,
          iconCreateFunction: function(cluster) {
            var childCount = cluster.getChildCount();

            var c = ' marker-cluster-';
            var iconSize;
            if (childCount < 2.5) {
              c += 'x-small';
              iconSize = 20;
            } else if (childCount < 5) {
              c += 'small';
              iconSize = 24;
            } else if (childCount < 7.5) {
              c += 'medium';
              iconSize = 30;
            } else if (childCount < 10) {
              c += 'large';
              iconSize = 36;
            } else {
              c += 'x-large';
              iconSize = 48;
            }

            return new L.DivIcon({ 
              html: '<div><span>' + childCount + '</span></div>',
              className: 'marker-cluster' + c,
              iconSize: new L.Point(iconSize, iconSize)
            });
          }
        });

        this.bindClusterEvents();
        
      },

      bindClusterEvents: function() {
        clusters.on('animationend', function(e){
          DSIMap.addPartnerLines(DSIMap.allOrganisations);
        });

        clusters.on('clustermouseover', function (a) {
          DSIMap.highlightMarkerLines(a.layer);
        });

        clusters.on('clustermouseout', function (a) {
          DSIMap.unhighlightMarkerLines(a.layer);
        });

        clusters.on('clusterclick', function (a) {
          a.layer.bindPopup('').openPopup();
        });
      },

      bindMapEvents: function() {
        this.bindPopupOpen();
        this.bindZoomEnd();
        this.bindShowOrgNetworkClick();
        this.bindOrgZoomClick();

        map.on('zoomstart', function(e){
          DSIMap.clearLines();
        });

        $('.show-more a').click(function(e){
          DSIMap.slideInPanels();
          e.preventDefault();
          return false;
        });

        $('a.hide-info').click(function(e) {
          e.preventDefault();
          DSIMap.slideOutPanels();
          return false;
        });

        $('a.hide-info-mobile').click(function(e) {
          e.preventDefault();
          DSIMap.hideMobilePanels();
          return false;
        });

        $('a.show-info-mobile').click(function(e) {
          e.preventDefault();
          DSIMap.showMobilePanels();
          return false;
        });
      },

      bindPopupOpen: function(e) {
        map.on('popupopen', function(e) {
          if (e.popup._source._guid) {
            DSIMap.fetchPinPopupContent(e);
          } else if (e.popup._source._childCount) {
            DSIMap.fetchClusterPopupContent(e);
          }
        });
      },

      bindZoomEnd: function(e) {
        map.on('zoomend', function(e){
          if (e.target._zoom > 6) {
            map.removeLayer(config.layerWithoutLabels);
            map.addLayer(config.layerWithLabels);
          } else {
            map.removeLayer(config.layerWithLabels);
            map.addLayer(config.layerWithoutLabels);
          }
        });
      },

      bindShowOrgNetworkClick: function(e) {
        $(document.body).on('click', 'a.show-org-network', function(e) {
          var guid = e.target.hash.substring(1);
          var markerLatLng = DSIMap.allOrganisations[guid].marker._latlng;
          var partnerLatLngs = [];

          $.each(DSIMap.allOrganisations[guid].partners, function(partnerGuid, partner) {
            partnerLatLngs.push(DSIMap.allOrganisations[partnerGuid].marker._latlng);
          });

          var networkLatLngs = partnerLatLngs;
          networkLatLngs.push(markerLatLng);

          var bounds = new L.LatLngBounds(networkLatLngs);
          map.fitBounds(bounds);

          $('.active-organisation .name').text(DSIMap.allOrganisations[guid].name);
          $('.active-organisation').css({ top: 0 });

          e.preventDefault();
          return false;
        });
      },

      bindOrgZoomClick: function(e) {
        $(document.body).on('click', 'a.org-zoom', function(e) {
          var guid = e.target.hash.substring(1);
          var marker = DSIMap.allOrganisations[guid].marker;

          map.setZoom(18);
          map.panTo(marker._latlng);
          marker.openPopup();

          e.preventDefault();
          return false;
        });
      },

      fetchOrganisations: function(e) {
        $.ajax({
          type: 'GET',
          url: '/organisations/map_index',
          success: function(data){
            DSIMap.setAllOrganisations(data.organisations);
            DSIMap.addOrganisationPins(DSIMap.allOrganisations);

            DSIMap.fetchPartners();
          },
          dataType: 'json'
        });
      },

      setAllOrganisations: function(organisations) {
        $.each(organisations, function(i, organisation) {
          DSIMap.allOrganisations[organisation.guid] = {};
          DSIMap.allOrganisations[organisation.guid].name = organisation.name;
          DSIMap.allOrganisations[organisation.guid].marker = DSIMap.buildOrganisationPin(organisation);     
        });
      },

      addOrganisationPins: function(organisations) {
        $.each(organisations, function(guid, organisation) {
          clusters.addLayer(DSIMap.allOrganisations[guid].marker);
        });

        map.addLayer(clusters);
      },

      buildOrganisationPin: function(organisation) {
        var marker = L.marker(new L.LatLng(organisation.lat, organisation.lng), {
          icon: new L.Icon({
            iconSize: new L.Point(10, 16),
            iconUrl: "assets/home/marker.png"
          })
        })
        .bindPopup('', {
          closeButton: false
        }).on('mouseover', function(mkr){
          this._icon.src = "assets/home/marker-hover.png";
          DSIMap.highlightMarkerLines(this);
        }).on('mouseout', function(mkr){
          this._icon.src = "assets/home/marker.png";
          DSIMap.unhighlightMarkerLines(this);
        });

        marker._guid = organisation.guid;

        return marker;
        //clusters.addLayer(marker);
      },

      fetchPinPopupContent: function(e) {
        var guid = e.popup._source._guid;

        $.ajax({
          type: 'GET',
          url: '/organisations/'+guid+'/map_show',
          beforeSend: function(){
            e.popup.setContent('<div class="spinner"></div>');
          },
          success: function(data){
            DSIMap.setPinPopupContent(data.organisation, e.popup);
          },
          error: function() {
            e.popup.setContent('<div class="popup-error">Oops - something went wrong.</div>');
          },
          dataType: 'json'
        });

        if (this.isMobile()) {
          this.hideMobilePanels();
        } else {
          this.slideOutPanels();
        }
      },

      setPinPopupContent: function(organisation, popup) {
        var content = '';
        content += '<h3><a href="/organisations/'+organisation.guid+'">'+organisation.name+'</a></h3>';

        if (organisation.address) {
          content += '<p class="address">'+organisation.address+'</p>';
        }

        if (organisation.projects.length > 0) {
          content += '<ul class="projects">';
          $.each(organisation.projects, function(i, project) {
            content += '<li><a href="/projects/'+project.guid+'">'+project.name+'</a></li>';
          });
          content += '</ul>';
        }

        content += '<div class="divider"></div>';
        content += '<div class="actions"><a href="#'+organisation.guid+'" class="show-org-network">Show network</a></div>';

        popup.setContent(content);
      },

      fetchClusterPopupContent: function(e) {
        var guids = [];

        $.each(e.popup._source.getAllChildMarkers(), function(i, marker){
          guids.push(marker._guid);
        });

        $.ajax({
          type: 'GET',
          url: '/organisations/map_cluster',
          data: {
            guids: guids
          },
          beforeSend: function(){
            e.popup.setContent('<div class="spinner"></div>');
          },
          success: function(data){
            DSIMap.setClusterPopupContent(data.organisations, e.popup);
          },
          error: function() {
            e.popup.setContent('<div class="popup-error">Oops - something went wrong.</div>');
          },
          dataType: 'json'
        });

        if (this.isMobile()) {
          this.hideMobilePanels();
        } else {
          this.slideOutPanels();
        }
      },

      setClusterPopupContent: function(organisations, popup) {
        var content = '';

        content += '<ul class="organisations">';
        $.each(organisations, function(i, organisation) {
          content += '<li><a class="org-zoom" href="#'+organisation.guid+'">'+organisation.name+'</a></>';
        });
        content += '</ul>';

        popup.setContent(content);
      },

      isMobile: function() {
        var mobile = false;
        if( window.matchMedia && window.matchMedia( "(max-width: 767px)" ).matches) {
          mobile = true;
        }
        return mobile;
      },

      slideOutPanels: function() {
        $('.logo').css({ top: "-128px" });
        $('.info').css({ right: "-898px" });
        setTimeout(function(){
          $('.info').hide();
          $('.small-info').fadeIn();
        }, 500);
      },

      slideInPanels: function() {
        $('.info').show();
        $('.small-info').fadeOut();
        setTimeout(function(){
          $('.info').css({ right: "0" });
          $('.logo').css({ top: "0" });
        }, 250);
      },

      showMobilePanels: function() {
        $('.mobile-info').show();
        $('.mobile-small-info').hide();
      },

      hideMobilePanels: function() {
        $('.mobile-info').hide();
        $('.mobile-small-info').show();
      },

      clearLines: function() {
        for (i in map._layers) {
          if (map._layers[i]._path != undefined) {
            try {
              map.removeLayer(map._layers[i]);
            }
            catch(e){
              console.log("problem with " + e + map._layers[i]);
            }
          }
        }
      },

      fetchPartners: function() {
        $.ajax({
          type: 'GET',
          //url: '/organisations/map_partners',
          url: '/organisations/map_partners_static',
          success: function(data){
            DSIMap.setAllOrganisationPartners(data.organisations);
            DSIMap.addPartnerLines(DSIMap.allOrganisations);
          },
          dataType: 'json'
        });
      },

      setAllOrganisationPartners: function(organisations) {
        $.each(organisations, function(i, organisation) {
          DSIMap.allOrganisations[organisation.guid].partners = organisation.partners;
        });
      },

      addPartnerLines: function(organisations) {
        var lines = this.buildPartnerLines(organisations);

        $.each(lines, function(i, line){
          var newLine = DSIMap.drawLine(line.markerA, line.markerB, line.count);
          DSIMap.addLineToMarker(line.markerA, newLine);
          DSIMap.addLineToMarker(line.markerB, newLine);
        });
      },

      drawLine: function(markerA, markerB, count) {

        var line = new L.Polyline([markerA._latlng, markerB._latlng], {
          color: '#999999',
          weight: DSIMap.lineWeightForCount(count),
          opacity: DSIMap.lineOpacityForCount(count),
          smoothFactor: 1
        }).bindPopup('').on('mouseover', function(){
          this.setStyle({ color: '#F39200' });
        }).on('mouseout', function(){
          this.setStyle({ color: '#999999' });
        }).addTo(map);
        
        return line;
      },

      lineWeightForCount: function(count) {
        return (count / DSIMap.currentMaxLineCount) * config.maxLineWeight;
      },

      lineOpacityForCount: function(count) {
        //return 0.15;
        return (count / DSIMap.currentMaxLineCount) * config.maxLineOpacity; 
      },

      buildPartnerLines: function(organisations) {
        var lines = {};
        DSIMap.currentMaxLineCount = 0;

        $.each(organisations, function(orgGuid, org){
          
          // Loop through each of the org's partners
          $.each(org.partners, function(partnerGuid, partner){
            visibleMarkerA = clusters.getVisibleParent(org.marker);
            visibleMarkerB = clusters.getVisibleParent(DSIMap.allOrganisations[partnerGuid].marker);
            

            var visibleMarkers = [visibleMarkerA._latlng, visibleMarkerB._latlng];

            // If we have already set a line for this combination of markers increase the count (weight)
            if (lines[visibleMarkers]) {
              lines[visibleMarkers].count += 1;
            } 
            // Else initialise it
            else {
              lines[visibleMarkers] = {};
              lines[visibleMarkers].count = 1;  
              lines[visibleMarkers].markerA = visibleMarkerA;
              lines[visibleMarkers].markerB = visibleMarkerB;
            }

            if (lines[visibleMarkers].count > DSIMap.currentMaxLineCount) {
              DSIMap.currentMaxLineCount = lines[visibleMarkers].count;
            }          
     
          });
          
        });

        return lines;
      },

      addLineToMarker: function(marker, line) {
        if (!marker._lines) marker._lines = [];
        marker._lines.push(line);
      },

      highlightMarkerLines: function(marker) {
        if (!marker._lines) return false;

        $.each(marker._lines, function(i, line) {
          line.setStyle({ color: '#F39200' });
        });
      },

      unhighlightMarkerLines: function(marker) {
        if (!marker._lines) return false;

        $.each(marker._lines, function(i, line) {
          line.setStyle({ color: '#999999' });
        });
      }
    }

    DSIMap.init();


  });

</script>