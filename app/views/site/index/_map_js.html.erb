<script>
  $(function() {

    DSIMap = {

      map: null,
      clusters: null,
      allOrganisations: {},
      visibleOrganisations: {},
      currentMaxLineCount: 0,
      networkViewMarker: null,

      defaultCenter: [49, 12],
      defaultZoom: 5,
      minLineWeight: 2,
      maxLineWeight: 5,
      minLineOpacity: 0.3,
      maxLineOpacity: 0.9,
      maxClusterRadius: 80,
      disableClusteringAtZoom: 20,
      layerWithoutLabels: L.mapbox.tileLayer("<%= Digitalsocial::MAPBOX_TEST_6 %>"),
      layerWithLabels: L.mapbox.tileLayer("<%= Digitalsocial::MAPBOX_TEST_6 %>"),
      maxClusterChildCount: 40,

      // Adjustable settings
      currentFilters: <%= params[:filters].to_json.html_safe %>,

      paramsClusterLevel: <%= params[:cluster].to_json.html_safe %>,
      paramsZoom: <%= params[:zoom].to_json.html_safe %>,
      paramsCenter: [<%= params[:center] %>],
      paramsPopup: <%= params[:popup].to_json.html_safe %>,
      paramsNetwork: <%= params[:network].to_json.html_safe %>,

      preNetworkZoom: null,
      preNetworkCenter: null,

      clusterLevel: (this.paramsClusterLevel || $('input#cluster-level').val()),

      clusterConfig: [{
          // Level 0
          disableClusteringAtZoom: 1, // 1 = no clustering
          maxLineWeight: 1.5,
          maxLineOpacity: 0.2
        }, {
          // Level 1
          disableClusteringAtZoom: 20,
          maxLineWeight: 5,
          maxLineOpacity: 0.4,
          maxClusterRadius: 20
        }, {
          // Level 2
          disableClusteringAtZoom: 20,
          maxLineWeight: 5,
          maxLineOpacity: 0.4,
          maxClusterRadius: 30
        }, {
          // Level 3
          disableClusteringAtZoom: 20,
          maxLineWeight: 5,
          maxLineOpacity: 0.4,
          maxClusterRadius: 50
        }, {
          // Level 4
          disableClusteringAtZoom: 20,
          maxLineWeight: 5,
          maxLineOpacity: 0.4,
          maxClusterRadius: 80
        }
      ],

      init: function() {
        this.initMap();
        this.bindMapEvents();

        this.initClusters();
        this.initFilter();

        if (this.currentFilters) {
          this.fetchFilterOrganisations();
        }

        this.fetchOrganisations();
        this.paramsActions();
      },

      initMap: function() {
        var center = (DSIMap.paramsCenter.length) ? DSIMap.paramsCenter : DSIMap.defaultCenter;
        var zoom = DSIMap.paramsZoom || DSIMap.defaultZoom;

        map = L.map('home-map', {
          scrollWheelZoom: true
        })
        .setView(center, zoom)
        .addLayer(DSIMap.layerWithoutLabels);

        map._container.className = "leaflet-container leaflet-fade-anim cluster-level-" + DSIMap.clusterLevel;
      },

      initClusters: function() {
        DSIMap.clusterLevel = $('.filter #cluster-level').val();
        $.extend(DSIMap, DSIMap.clusterConfig[DSIMap.clusterLevel]);

        clusters = new L.MarkerClusterGroup({
          showCoverageOnHover: false,
          removeOutsideVisibleBounds: false,
          zoomToBoundsOnClick: false,
          maxClusterRadius: DSIMap.maxClusterRadius,
          disableClusteringAtZoom: DSIMap.disableClusteringAtZoom,
          iconCreateFunction: function(cluster) {
            var childCount = cluster.getChildCount();

            var c = ' marker-cluster-';
            var iconSize;
            if (childCount < DSIMap.maxClusterChildCount / 10) {
              c += 'x-small';
              iconSize = 16;
            } else if (childCount < DSIMap.maxClusterChildCount / 5) {
              c += 'small';
              iconSize = 20;
            } else if (childCount < DSIMap.maxClusterChildCount / 2.5) {
              c += 'medium';
              iconSize = 26;
            } else if (childCount < DSIMap.maxClusterChildCount) {
              c += 'large';
              iconSize = 36;
            } else {
              c += 'x-large';
              iconSize = 48;
            }

            return new L.DivIcon({
              html: '<div><span>' + childCount + '</span></div>',
              className: 'marker-cluster' + c,
              iconSize: new L.Point(iconSize, iconSize)
            });
          }
        });

        this.bindClusterEvents();

      },

      initFilter: function() {
        this.bindFilterEvents();
      },

      bindFilterEvents: function() {
        $('.filter a.title').click(function(e){
          $(this).parents('.filter-section').toggleClass('expanded');
          e.preventDefault();
        });

        $('.filter .option input').change(function(e){
          $('.filter .filter-button').removeAttr('disabled');
        });

        $('.filter .filter-section a.reset').click(function(e){
          $(this).parents('.filter-section').find('.option input').attr('checked', false);
          $('.filter form').submit();

          e.preventDefault();
        });

        $('.filter .filter-share-section a.show-url').click(function(e){
          DSIMap.updateShareUrlInput();

          $('.filter .filter-share-section input').fadeIn(function(){
            $(this).select();
          });
          e.preventDefault();
        });

        $("#slider" ).slider({
          value: DSIMap.clusterLevel,
          min: 0,
          max: 4,
          step: 1,
          slide: function(event, ui) {
            DSIMap.clusterLevel = ui.value;
            $('.filter #cluster-level').val(DSIMap.clusterLevel);

            map._container.className = "leaflet-container leaflet-fade-anim cluster-level-" + DSIMap.clusterLevel;

            clusters.clearLayers();
            DSIMap.clearLines();

            DSIMap.initClusters();
            DSIMap.addOrganisationPins();
            DSIMap.resizeClusters();
            DSIMap.addPartnerLines();
          }
        });
      },

      bindClusterEvents: function() {
        clusters.on('animationend', function(e){
          DSIMap.addVisibleLines();
          DSIMap.resizeClusters();
        });

        clusters.on('clustermouseover', function (a) {
          if(!DSIMap.networkViewMarker) DSIMap.highlightMarkerLines(a.layer);
        });

        clusters.on('clustermouseout', function (a) {
          if(!DSIMap.networkViewMarker) DSIMap.unhighlightMarkerLines(a.layer);
        });

        clusters.on('clusterclick', function (a) {
          a.layer.bindPopup('', {
            closeButton: false,
            autoPan: false
          }).openPopup();
        });
      },

      bindMapEvents: function() {
        this.bindPopupOpen();
        this.bindZoomEnd();
        this.bindShowOrgNetworkClick();
        this.bindOrgZoomClick();
        this.bindResetMapClick();
        this.bindShowAllOrgsClick();
        this.bindZoomClusterClick();

        map.on('zoomstart', function(e){
          DSIMap.clearLines();
        });

        // IE9 and below do not fire animation end
        if($.browser.msie && $.browser.version <= 9) {
          map.on('zoomend', function(e){
            setTimeout(DSIMap.addVisibleLines, 1000);
          });
        }

        $('.show-more a').click(function(e){
          DSIMap.slideInPanels();
          e.preventDefault();
          return false;
        });

        $('a.hide-info').click(function(e) {
          e.preventDefault();
          DSIMap.slideOutPanels();
          return false;
        });

        $('a.hide-info-mobile').click(function(e) {
          e.preventDefault();
          DSIMap.hideMobilePanels();
          return false;
        });

        $('a.show-info-mobile').click(function(e) {
          e.preventDefault();
          DSIMap.showMobilePanels();
          return false;
        });

        $('.show-filter a').click(function(e) {
          e.preventDefault();
          DSIMap.slideOutPanels();
          return false;
        });
      },

      bindPopupOpen: function(e) {
        map.on('popupopen', function(e) {
          if (e.popup._source._guid) {
            DSIMap.fetchPinPopupContent(e);
          } else if (e.popup._source._childCount) {
            DSIMap.fetchClusterPopupContent(e);
          }
        });
      },

      bindZoomEnd: function(e) {
        map.on('zoomend', function(e){
          if (e.target._zoom > 6) {
            map.removeLayer(DSIMap.layerWithoutLabels);
            map.addLayer(DSIMap.layerWithLabels);
          } else {
            map.removeLayer(DSIMap.layerWithLabels);
            map.addLayer(DSIMap.layerWithoutLabels);
          }
        });
      },

      bindShowOrgNetworkClick: function(e) {
        $(document.body).on('click', 'a.show-org-network', function(e) {
          var guid = e.target.hash.substring(1);
          DSIMap.showOrgNetwork(guid);

          e.preventDefault();
          return false;
        });
      },

      showOrgNetwork: function(guid) {
        clusters.clearLayers();
        DSIMap.clearLines();

        DSIMap.preNetworkZoom = map.getZoom();
        DSIMap.preNetworkCenter = map.getCenter();

        var markerLatLng = DSIMap.allOrganisations[guid].marker._latlng;
        DSIMap.visibleOrganisations = {};

        if (DSIMap.networkViewMarker) {
          DSIMap.highlightMarker(visibleMarker);
        }

        DSIMap.networkViewMarker = DSIMap.allOrganisations[guid].marker;

        var partnerLatLngs = [];

        $.each(DSIMap.allOrganisations[guid].partners, function(i, partnerGuid) {
          DSIMap.visibleOrganisations[partnerGuid] = DSIMap.allOrganisations[partnerGuid];
          partnerLatLngs.push(DSIMap.allOrganisations[partnerGuid].marker._latlng);
        });

        $('.active-organisation .name').text(DSIMap.allOrganisations[guid].name);
        $('.active-organisation').css({ top: 0 });

        DSIMap.visibleOrganisations[guid] = DSIMap.allOrganisations[guid];
        DSIMap.addOrganisationPins();
        DSIMap.addPartnerLines();

        var networkLatLngs = partnerLatLngs;
        networkLatLngs.push(markerLatLng);
        var bounds = new L.LatLngBounds(networkLatLngs);
        map.fitBounds(bounds);

        var visibleMarker = clusters.getVisibleParent(DSIMap.networkViewMarker);

        DSIMap.highlightMarkerLines(visibleMarker);
        DSIMap.highlightMarker(visibleMarker);

        DSIMap.slideOutPanels();
        $('.filter').hide();
      },

      bindOrgZoomClick: function(e) {
        $(document.body).on('click', 'a.org-zoom', function(e) {
          var guid = e.target.hash.substring(1);
          var marker = DSIMap.allOrganisations[guid].marker;

          clusters.zoomToShowLayer(marker, function(){
            marker.openPopup();
          });

          e.preventDefault();
          return false;
        });
      },

      bindShowAllOrgsClick: function(e) {
        $(document.body).on('click', '.show-all-orgs a', function(e) {
          $(this).parents('.leaflet-popup-content').find('.organisations li').show();
          $(this).hide();
          e.preventDefault();
        });
      },

      bindResetMapClick: function() {
        $('a.reset-map').click(function(e){
          $(this).attr('href', DSIMap.getShareUrl());
        });
      },

      bindZoomClusterClick: function() {
        $(document.body).on('click', 'a.zoom-cluster', function(e) {
          var popup_id = $(this).data('cluster-id');
          map._layers[popup_id].zoomToBounds();
          e.preventDefault();
        });
      },

      fetchOrganisations: function(e) {
        $.ajax({
          type: 'GET',
          url: '/organisations/map_index',
          data: {
            filters: DSIMap.currentFilters
          },
          success: function(data){
            DSIMap.setAllOrganisations(data.organisations);
            DSIMap.visibleOrganisations = DSIMap.allOrganisations;
            DSIMap.addOrganisationPins();
            DSIMap.resizeClusters();

            DSIMap.fetchPartners();

            if (DSIMap.paramsPopup) {
              DSIMap.allOrganisations[DSIMap.paramsPopup].marker.openPopup();
            }
          },
          dataType: 'json'
        });
      },

      fetchFilterOrganisations: function(e) {
        $.ajax({
          type: 'GET',
          url: '/organisations/map_index',
          success: function(data){
            DSIMap.addFilterOrganisationPins(data.organisations);
          },
          dataType: 'json'
        });
      },

      setAllOrganisations: function(organisations) {
        $.each(organisations, function(i, organisation) {
          DSIMap.allOrganisations[organisation.guid] = {};
          DSIMap.allOrganisations[organisation.guid].name = organisation.name;
          DSIMap.allOrganisations[organisation.guid].marker = DSIMap.buildOrganisationPin(organisation);
          DSIMap.allOrganisations[organisation.guid].partners = [];
        });
      },

      addVisibleLines: function() {
        DSIMap.addPartnerLines(DSIMap.allOrganisations);

        if (DSIMap.networkViewMarker) {
          var visibleMarker = clusters.getVisibleParent(DSIMap.networkViewMarker);

          DSIMap.highlightMarkerLines(visibleMarker);
          DSIMap.highlightMarker(visibleMarker);
        }
      },

      resizeClusters: function() {
        DSIMap.maxClusterChildCount = 0;
        $.each(clusters._featureGroup._layers, function(i, e){
          if (e._childCount && e._childCount > DSIMap.maxClusterChildCount) {
            DSIMap.maxClusterChildCount = e._childCount;
          }
        });

        $.each(clusters._featureGroup._layers, function(i, e){
          var childCount = e._childCount;
          if (childCount){
            var c = ' marker-cluster-';
            var iconSize;
            if (childCount < DSIMap.maxClusterChildCount / 10) {
              c += 'x-small';
              iconSize = 16;
            } else if (childCount < DSIMap.maxClusterChildCount / 5) {
              c += 'small';
              iconSize = 20;
            } else if (childCount < DSIMap.maxClusterChildCount / 2.5) {
              c += 'medium';
              iconSize = 26;
            } else if (childCount < DSIMap.maxClusterChildCount) {
              c += 'large';
              iconSize = 36;
            } else {
              c += 'x-large';
              iconSize = 48;
            }

            e.setIcon(new L.DivIcon({
              html: '<div><span>' + childCount + '</span></div>',
              className: 'marker-cluster' + c,
              iconSize: new L.Point(iconSize, iconSize)
            }));
          }
        });

      },

      addOrganisationPins: function() {
        map.removeLayer(clusters);
        clusters.clearLayers();

        $.each(DSIMap.visibleOrganisations, function(guid, organisation) {
          clusters.addLayer(DSIMap.allOrganisations[guid].marker);
        });

        map.addLayer(clusters);
      },

      buildOrganisationPin: function(organisation) {
        var marker = L.marker(new L.LatLng(organisation.lat, organisation.lng), {
          icon: new L.DivIcon({
            iconSize: new L.Point(6, 6)
          })
        })
        .bindPopup('', {
          closeButton: false
        }).on('mouseover', function(mkr){
          if (!DSIMap.networkViewMarker) {
            DSIMap.highlightMarkerLines(this);
          }
        }).on('mouseout', function(mkr){
          if (!DSIMap.networkViewMarker) {
            DSIMap.unhighlightMarkerLines(this);
          }
        });

        marker._guid = organisation.guid;

        return marker;
      },

      addFilterOrganisationPins: function(organisations) {
        $.each(organisations, function(i, organisation){
          var marker = L.marker(new L.LatLng(organisation.lat, organisation.lng), {
            icon: new L.DivIcon({
              iconSize: new L.Point(6, 6),
              className: 'leaflet-div-icon faded'
            })
          });
          marker.addTo(map);
        });
      },

      fetchPinPopupContent: function(e) {
        var guid = e.popup._source._guid;

        $.ajax({
          type: 'GET',
          url: '/organisations/'+guid+'/map_show',
          beforeSend: function(){
            e.popup.setContent('<div class="spinner"></div>');
          },
          success: function(data){
            DSIMap.setPinPopupContent(data.organisation, e.popup);
          },
          error: function() {
            e.popup.setContent('<div class="popup-error">Oops - something went wrong.</div>');
          },
          dataType: 'json'
        });

        if (this.isMobile()) {
          this.hideMobilePanels();
        } else {
          this.slideOutPanels();
        }
      },

      setPinPopupContent: function(organisation, popup) {
        var content = '';
        content += '<h3><a href="/organisations/'+organisation.guid+'">'+organisation.name+'</a></h3>';

        if (organisation.address) {
          content += '<p class="address">'+organisation.address+'</p>';
        }

        if (organisation.projects.length > 0) {
          content += '<ul class="projects">';
          $.each(organisation.projects, function(i, project) {
            content += '<li><a href="/projects/'+project.guid+'">'+project.name+'</a></li>';
          });
          content += '</ul>';
        }

        if (DSIMap.allOrganisations[organisation.guid].partners.length && !DSIMap.networkViewMarker) {
          content += '<div class="divider"></div>';
          content += '<div class="actions"><a href="#'+organisation.guid+'" class="show-org-network">Show this organisation\'s network</a></div>';
        }

        popup.setContent(content);
      },

      fetchClusterPopupContent: function(e) {
        var guids = [];

        $.each(e.popup._source.getAllChildMarkers(), function(i, marker){
          guids.push(marker._guid);
        });

        $.ajax({
          type: 'POST',
          url: '/organisations/map_cluster',
          data: {
            guids: guids
          },
          beforeSend: function(){
            e.popup.setContent('<div class="spinner"></div>');
          },
          success: function(data){
            DSIMap.setClusterPopupContent(data.organisations, e.popup);
          },
          error: function() {
            e.popup.setContent('<div class="popup-error">Oops - something went wrong.</div>');
          },
          dataType: 'json'
        });

        if (this.isMobile()) {
          this.hideMobilePanels();
        } else {
          this.slideOutPanels();
        }
      },

      setClusterPopupContent: function(organisations, popup) {
        var content = '';

        content += '<ul class="organisations">';
        $.each(organisations, function(i, organisation) {
          content += '<li><a class="org-zoom" href="#'+organisation.guid+'">'+organisation.name+'</a></>';
        });
        content += '</ul>';

        content += '<div class="divider"></div>';
        content += '<div class="actions"><a href="#" data-cluster-id="'+popup._source._leaflet_id+'" class="zoom-cluster">Zoom in</a></div>';

        popup.setContent(content);
      },

      isMobile: function() {
        var mobile = false;
        if( window.matchMedia && window.matchMedia( "(max-width: 767px)" ).matches) {
          mobile = true;
        }
        return mobile;
      },

      slideOutPanels: function() {
        $('.info').css({ left: "-898px" });
        $('.show-filter').css({ top: "-60px" });

        setTimeout(function(){
          $('.info').hide();
          $('.small-info').fadeIn();
          $('.filter').css({ top: "0" });
        }, 500);
      },

      slideInPanels: function() {
        $('.info').show();
        $('.small-info').fadeOut();
        $('.filter').css({ top: "-936px" });

        setTimeout(function(){
          $('.info').css({ left: "0" });
          $('.show-filter').css({ top: "0" });
        }, 250);
      },

      showMobilePanels: function() {
        $('.mobile-info').show();
        $('.mobile-small-info').hide();
      },

      hideMobilePanels: function() {
        $('.mobile-info').hide();
        $('.mobile-small-info').show();
      },

      clearLines: function() {
        DSIMap.currentMaxLineCount = 0;

        for (i in map._layers) {
          if (map._layers[i]._path != undefined) {
            try {
              map.removeLayer(map._layers[i]);
            }
            catch(e){
              console.log("problem with " + e + map._layers[i]);
            }
          }
        }
      },

      fetchPartners: function() {
        $.ajax({
          type: 'GET',
          url: '/organisations/map_partners',
          data: {
            filters: DSIMap.currentFilters
          },
          //url: '/organisations/map_partners_static',
          success: function(data){
            DSIMap.setAllOrganisationPartners(data.organisations);
            DSIMap.addPartnerLines(DSIMap.allOrganisations);

            if (DSIMap.paramsNetwork) {
              DSIMap.showOrgNetwork(DSIMap.paramsNetwork);
            }
          },
          dataType: 'json'
        });
      },

      setAllOrganisationPartners: function(organisations) {
        $.each(organisations, function(guid, partners) {
          DSIMap.allOrganisations[guid].partners = partners;
        });
      },

      addPartnerLines: function(organisations) {
        DSIMap.clearLines();

        var lines = this.buildPartnerLines(organisations);

        $.each(lines, function(i, line){
            var newLine = DSIMap.drawLine(line.markerA, line.markerB, line.count, line.activity);
          DSIMap.addLineToMarker(line.markerA, newLine);
          DSIMap.addLineToMarker(line.markerB, newLine);
        });
      },

     drawLine: function(markerA, markerB, count, activityUri) {

         var lineColours = {
             'http://data.digitalsocial.eu/def/concept/activity-type/research-project': "#a6cee3",
             'http://data.digitalsocial.eu/def/concept/activity-type/event': "#1f78b4",
             'http://data.digitalsocial.eu/def/concept/activity-type/network': "#b2df8a",
             'http://data.digitalsocial.eu/def/concept/activity-type/incubators-and-acelerators': "#33a02c",
             'http://data.digitalsocial.eu/def/concept/activity-type/maker-and-hacker-spaces': "#fb9a99",
             'http://data.digitalsocial.eu/def/concept/activity-type/education-and-training': "#e31a1c",
             'http://data.digitalsocial.eu/def/concept/activity-type/delivering-a-web-service': "#fdbf6f",
             'http://data.digitalsocial.eu/def/concept/activity-type/investment-and-funding': "#ff7f00",
             'http://data.digitalsocial.eu/def/concept/activity-type/advocating-and-campaigning': "#cab2d6",
             'http://data.digitalsocial.eu/def/concept/activity-type/advisory-or-expert-body': "#6a3d9a",
             'http://data.digitalsocial.eu/def/concept/activity-type/other': "#b15928"
         };

        var line = new L.Polyline([markerA._latlng, markerB._latlng], {
          color: lineColours[activityUri],
          weight: DSIMap.lineWeightForCount(count),
          opacity: DSIMap.lineOpacityForCount(count),
          smoothFactor: 1,
          clickable: false
        }).addTo(map);

        return line;
      },

      lineWeightForCount: function(count) {
        var max = DSIMap.currentMaxLineCount;
        if (max <= 1 && DSIMap.clusterLevel != 0) max = 2;

        var ratio = (count / max);
        var difference = DSIMap.maxLineWeight - DSIMap.minLineWeight;

        return DSIMap.minLineWeight + (ratio * difference);
      },

      lineOpacityForCount: function(count) {
        var max = DSIMap.currentMaxLineCount;
        if (max <= 1 && DSIMap.clusterLevel != 0) max = 2;

        var ratio = (count / max);
        var difference = DSIMap.maxLineOpacity - DSIMap.minLineOpacity;

        return DSIMap.minLineOpacity + (ratio * difference);
      },

      buildPartnerLines: function() {
        var lines = {};

        $.each(DSIMap.visibleOrganisations, function(orgGuid, org){

          // Loop through each of the org's partners
          $.each(org.partners, function(i, partner){
            var partnerGuid = partner.org,
                activityUri = partner.activity;

            if (DSIMap.visibleOrganisations[partnerGuid]) {

              visibleMarkerA = clusters.getVisibleParent(org.marker);
              visibleMarkerB = clusters.getVisibleParent(DSIMap.allOrganisations[partnerGuid].marker);

              if (visibleMarkerA._latlng == visibleMarkerB._latlng) return true;

              var visibleMarkers = [visibleMarkerA._latlng, visibleMarkerB._latlng];

              // If we have already set a line for this combination of markers increase the count (weight)
              if (lines[visibleMarkers]) {
                lines[visibleMarkers].count += 1;
              }
              // Else initialise it
              else {
                lines[visibleMarkers] = {};
                lines[visibleMarkers].count = 1;
                lines[visibleMarkers].markerA = visibleMarkerA;
                lines[visibleMarkers].markerB = visibleMarkerB;
                lines[visibleMarkers].activity = activityUri;
              }

              if (lines[visibleMarkers].count > DSIMap.currentMaxLineCount) {
                DSIMap.currentMaxLineCount = lines[visibleMarkers].count;
              }
            }

          });

        });

        return lines;
      },

      addLineToMarker: function(marker, line) {
        if (!marker._lines) marker._lines = [];
        marker._lines.push(line);
      },

      highlightMarker: function(marker) {
        marker._icon.className = marker._icon.className + ' hover';
      },

      highlightMarkerLines: function(marker) {
        if (!marker._lines) return false;

        $.each(marker._lines, function(i, line) {
          line.setStyle({ color: '#F39200' });
        });
      },

      unhighlightMarkerLines: function(marker) {
        if (!marker._lines) return false;

        $.each(marker._lines, function(i, line) {
          line.setStyle({ color: '#777' });
        });
      },

      paramsActions: function() {
        if (DSIMap.currentFilters || DSIMap.paramsClusterLevel) {
          if (DSIMap.isMobile()) {
            $('.mobile-filter').show();
          } else {
            $('.show-filter a').click();
          }
        }
      },

      getShareUrl: function() {
        var params = [];

        var zoom = DSIMap.preNetworkZoom || map.getZoom();
        params.push('zoom=' + zoom);

        var center = DSIMap.preNetworkCenter || map.getCenter();
        params.push('center=' + center.lat + ',' + center.lng);

        params.push('cluster=' + DSIMap.clusterLevel);

        if ($('.leaflet-popup:visible').length) {
          var guid = $('.leaflet-popup:visible').find('h3 a').attr('href').split('/')[2];
          params.push('popup=' + guid);
        } else if (DSIMap.networkViewMarker) {
          params.push('popup=' + DSIMap.networkViewMarker._guid);
        }

        if (DSIMap.currentFilters) {
          $.each(DSIMap.currentFilters, function(category, values){
            $.each(values, function(i, value){
              var key = encodeURIComponent('filters['+category+'][]');
              var val = encodeURIComponent(value);
              params.push(key+'='+val);
            });
          });
        }

        var url = location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '');
        url += '?' + params.join('&');
        return url;
      },

      updateShareUrlInput: function() {
        $('.filter-share-section input').val(DSIMap.getShareUrl());
      }
    }

    DSIMap.init();


  });

</script>
